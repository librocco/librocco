#@ load("github.lib.yml", "checkout")
#@ load("github.lib.yml", "load_artefacts")
#@ load("cache.lib.yml", "load_cached_artefacts")
#@ load("cache.lib.yml", "cache_node")
#@ load("rush.lib.yml", "rush_add_path")
#@ load("rush.lib.yml", "rush_install")
#@ load("rush.lib.yml", "rush_build")
#@ load("test-job.lib.yml", "test_job")
#@ load("build-crsqlite.lib.yml", "build_crsqlite")
#@ load("r2.lib.yml", "install_and_configure_rclone")
#@ load("r2.lib.yml", "upload_to_r2")

name: Checks

"on":
  push:
    branches-ignore:
      - "ci-debug/*"
      - "wip/**"
      - "vfs-benchmark/**"

jobs:
  build-cr-sqlite: #@ build_crsqlite()

  js-search-test: #@ test_job("JS-Search Tests", "pkg/js-search", "jest-junit")

  book-data-extension-test: #@ test_job("Book data extension Tests", "plugins/book-data-extension")

  web-client-test: #@ test_job("Web Client Tests", "apps/web-client")

  e2e-test:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    needs: build-cr-sqlite
    strategy:
      fail-fast: false
      matrix:
        shardIndex: [1, 2, 3, 4, 5, 6]
        shardTotal: [6]
    steps:
      -  #@ checkout()
      - uses: actions/setup-node@v4
        with:
          node-version: "20"
      - name: Compute desired compiled artifact version
        run: ./scripts/compute_artefacts_version.sh #! This will inform the cache to load the correct artefacts
      -  #@ load_artefacts()
      -  #@ load_cached_artefacts()
      -  #@ cache_node()
      -  #@ rush_add_path()
      -  #@ rush_install()
      -  #@ rush_build()
      - name: Build the app
        run: cd apps/web-client && rushx build:e2e
      - name: Download playwright browsers
        run: cd apps/e2e && npx playwright install
      - name: Run Playwright tests (shard ${{ matrix.shardIndex }}/${{ matrix.shardTotal }})
        run: cd apps/e2e && rushx test:ci
        env:
          PLAYWRIGHT_OPTIONS: "--shard=${{ matrix.shardIndex }}/${{ matrix.shardTotal }}"
          SHARD_INDEX: "${{ matrix.shardIndex }}"
      #! upload each shardâ€™s blob so we can merge later
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-blob-report-${{ matrix.shardIndex }}
          path: apps/e2e/blob-report
          retention-days: 2
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: sync-server-logs-${{ matrix.shardIndex }}
          path: apps/web-client/server_output.log
          retention-days: 2

  lint-and-typecheck:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: build-cr-sqlite
    permissions:
      id-token: write
      contents: read
      checks: write
    steps:
      -  #@ checkout()
      - uses: actions/setup-node@v4
        with:
          node-version: "20"
      -  #@ load_artefacts()
      -  #@ load_cached_artefacts()
      -  #@ cache_node()
      -  #@ rush_add_path()
      -  #@ rush_install()
      -  #@ rush_build()
      - name: Lint all the packages
        run: rush lint:strict
      - name: Typecheck all the packages
        #! Run typecheck even if linting fails
        if: success() || failure()
        run: rush typecheck

  check-i18n-sync:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: build-cr-sqlite
    permissions:
      id-token: write
      contents: read
      checks: write
    steps:
      -  #@ checkout()
      - uses: actions/setup-node@v4
        with:
          node-version: "20"
      -  #@ load_artefacts()
      -  #@ load_cached_artefacts()
      -  #@ cache_node()
      -  #@ rush_add_path()
      -  #@ rush_install()
      -  #@ rush_build()
      - name: Run the check
        run: cd pkg/shared && rushx typesafe-i18n-check

  perform-monorepo-checks:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: build-cr-sqlite
    steps:
      -  #@ checkout()
      - uses: actions/setup-node@v4
        with:
          node-version: "20"
      -  #@ load_artefacts()
      -  #@ load_cached_artefacts()
      -  #@ cache_node()
      -  #@ rush_add_path()
      -  #@ rush_install()
      -  #@ rush_build()
      - name: Check for unlisted artifacts in 'apps' and 'pkg' folders
        run: rush check-workspace-projects

  deploy-preview:
    name: Deploy preview web-client app to R2
    runs-on: ubuntu-latest
    needs: build-cr-sqlite
    steps:
      -  #@ checkout()
      - uses: actions/setup-node@v4
        with:
          node-version: "20"
      - name: compute desired compiled artifact version
        run: ./scripts/compute_artefacts_version.sh #! This will inform the cache to load the correct artefacts
      -  #@ load_artefacts()
      -  #@ load_cached_artefacts()
      -  #@ cache_node()
      -  #@ rush_add_path()
      -  #@ rush_install()
      -  #@ rush_build()
      - name: Prepare Weblate env (only for weblate branches)
        if: contains(github.head_ref || github.ref_name, 'weblate')
        run: |
          echo "PUBLIC_WEBLATE_API_KEY=${{ secrets.PUBLIC_WEBLATE_API_KEY }}" >> "$GITHUB_ENV"
          echo "PUBLIC_WEBLATE_COMPONENT_URL=${{ vars.PUBLIC_WEBLATE_COMPONENT_URL }}" >> "$GITHUB_ENV"

      - name: Build web-client app using prefix ${{ github.head_ref || github.ref_name }}
        run: cd apps/web-client && rushx build:prod
        env:
          BASE_PATH: /${{ github.head_ref || github.ref_name }}
          SENTRY_ORG: code-myriad
          SENTRY_PROJECT: librocco
          SENTRY_URL: https://sentry.libroc.co
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          PUBLIC_SENTRY_DSN: ${{ secrets.PUBLIC_SENTRY_DSN }}
      -  #@ install_and_configure_rclone()
      -  #@ upload_to_r2("apps/web-client/build/", "${{ github.head_ref || github.ref_name }}/")
      - name: Output link to deployed app
        run: echo You can view the app on https://test.libroc.co/${{ github.head_ref || github.ref_name }}/index.html | tee -a $GITHUB_STEP_SUMMARY
  e2e-merge-report:
    if: ${{ !cancelled() }}
    needs: [e2e-test]
    runs-on: ubuntu-latest
    steps:
      -  #@ checkout()
      - uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Download blob reports
        uses: actions/download-artifact@v4
        with:
          path: all-blob-reports
          pattern: e2e-blob-report-*
          merge-multiple: true

      - name: Merge to HTML report
        run: npx playwright merge-reports --reporter html ./all-blob-reports

      -  #@ install_and_configure_rclone()
      -  #@ upload_to_r2("playwright-report/", "${{ github.head_ref || github.ref_name }}/tests/")

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-merged-html-report
          path: playwright-report
          retention-days: 30

      - name: Output link to report
        run: echo "Merged e2e report https://test.libroc.co/${{ github.head_ref || github.ref_name }}/tests/index.html" | tee -a $GITHUB_STEP_SUMMARY

  deploy-demo:
    name: Deploy demo web-client app to R2
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/production-demo'
    needs:
      [
        build-cr-sqlite,
        js-search-test,
        book-data-extension-test,
        web-client-test,
        e2e-test,
        lint-and-typecheck,
        check-i18n-sync,
        perform-monorepo-checks
      ]
    steps:
      -  #@ checkout()
      - uses: actions/setup-node@v4
        with:
          node-version: "20"
      - name: compute desired compiled artifact version
        run: ./scripts/compute_artefacts_version.sh #! This will inform the cache to load the correct artefacts
      -  #@ load_artefacts()
      -  #@ load_cached_artefacts()
      -  #@ cache_node()
      -  #@ rush_add_path()
      -  #@ rush_install()
      -  #@ rush_build()
      - name: Build web-client app
        run: cd apps/web-client && rushx build:prod
        env:
          BASE_PATH: "/demo"
          SENTRY_ORG: code-myriad
          SENTRY_PROJECT: librocco
          SENTRY_URL: https://sentry.libroc.co
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          PUBLIC_SENTRY_DSN: ${{ secrets.PUBLIC_SENTRY_DSN }}
          PUBLIC_IS_DEMO: "true"
          PUBLIC_DEMO_DB_URL: "https://librocco.codemyriad.io/demo_db.sqlite3"
      -  #@ install_and_configure_rclone()
      -  #@ upload_to_r2("apps/web-client/build/", "demo/")
      - name: Output link to deployed demo app
        run: echo You can view the demo app on https://libroc.co/demo | tee -a $GITHUB_STEP_SUMMARY
