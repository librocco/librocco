#@ load("github.lib.yml", "checkout")
#@ load("github.lib.yml", "load_artefacts")
#@ load("cache.lib.yml", "load_cached_artefacts")
#@ load("cache.lib.yml", "cache_node")
#@ load("rush.lib.yml", "rush_add_path")
#@ load("rush.lib.yml", "rush_install")
#@ load("rush.lib.yml", "rush_build")

name: Checks

"on":
  push:
    branches:
      - "vfs-benchmark/**"

jobs:
  build-cr-sqlite:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      rebuild: ${{ steps.ts.outputs.rebuild }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          lfs: true
          fetch-depth: 0 #! We need all the history to check artifact date
      - name: Compute desired compiled artifact version
        run: ./scripts/compute_artefacts_version.sh #! This will inform the cache to load the correct artefacts
      - name: Cache cr-sqlite artefacts
        uses: actions/cache@v4
        with:
          path: 3rd-party/artefacts
          key: ${{ runner.os }}-cr-sqlite-artefacts-${{ hashFiles('3rd-party/artefacts_version.txt') }}
      - name: Test if artefacts are stale
        id: ts
        shell: bash
        #! The script will output either `rebuild=yes` or `rebuild=no` on stdout
        run: scripts/compare_artefacts_version.sh >> "$GITHUB_OUTPUT"
      - uses: actions/setup-node@v4
        if: steps.ts.outputs.rebuild == 'yes'
        with:
          node-version: "20"
      - name: Install Rust 1.85.0
        if: steps.ts.outputs.rebuild == 'yes'
        #! I was getting this:
        #! error: older versions of the `wasm-bindgen` crate are incompatible with current versions of Rust; please update to `wasm-bindgen` v0.2.88
        #! and for now I decided to downgrade rust instead of upgrading wasm-bindgen
        uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.85.0
          override: true
      - name: install wasm-pack
        if: steps.ts.outputs.rebuild == 'yes'
        run: cargo install wasm-pack
      - name: install pnpm
        if: steps.ts.outputs.rebuild == 'yes'
        run: npm install -g 'pnpm@<9'
      - name: Build cr-sqlite
        if: steps.ts.outputs.rebuild == 'yes'
        run: ./scripts/build_vlcn.sh
      - name: Check that the build went fine
        #! Let's leave this without an `if`: it won't hurt and might help debugging
        run: git status; ls -l 3rd-party/artefacts/
      - name: upload to later jobs
        if: steps.ts.outputs.rebuild == 'yes'
        uses: actions/upload-artifact@v4
        with:
          name: built-vlcn-artefacts
          path: 3rd-party/artefacts/
      - name: Mark cached version
        run: cp 3rd-party/artefacts_version.txt 3rd-party/artefacts/version-cached.txt
      - name: Commit updated assets
        if: github.ref == 'refs/heads/compile-assets'
        run: bash scripts/commit-artefacts.sh
      - name: Push changes
        if: github.ref == 'refs/heads/compile-assets'
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: compile-assets

  vfs-benchmark:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    needs: build-cr-sqlite
    strategy:
      fail-fast: false
      matrix:
        shardIndex: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
        shardTotal: [10]
    steps:
      -  #@ checkout()
      - uses: actions/setup-node@v4
        with:
          node-version: "20"
      - name: Compute desired compiled artifact version
        run: ./scripts/compute_artefacts_version.sh #! This will inform the cache to load the correct artefacts
      -  #@ load_artefacts()
      -  #@ load_cached_artefacts()
      -  #@ cache_node()
      -  #@ rush_add_path()
      -  #@ rush_install()
      -  #@ rush_build()
      - name: Check wa-sqlite files
        run: cd apps/web-client/node_modules/@vlcn.io/wa-sqlite && ls -lR
      - name: Build the app
        run: cd apps/web-client && rushx build:e2e
      - name: Download playwright browsers
        run: cd apps/e2e && npx playwright install
      - name: Run Playwright tests (shard ${{ matrix.shardIndex }}/${{ matrix.shardTotal }})
        run: cd apps/e2e && rushx test:vfs:ci
        env:
          PLAYWRIGHT_OPTIONS: "--shard=${{ matrix.shardIndex }}/${{ matrix.shardTotal }}"
      #! upload each shardâ€™s blob so we can merge later
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-blob-report-${{ matrix.shardIndex }}
          path: apps/e2e/blob-report
          retention-days: 2

  vfs-benchmark-merge-report:
    if: ${{ !cancelled() }}
    needs: [vfs-benchmark]
    runs-on: ubuntu-latest
    steps:
      -  #@ checkout()
      - uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Download blob reports
        uses: actions/download-artifact@v4
        with:
          path: all-blob-reports
          pattern: e2e-blob-report-*
          merge-multiple: true

      - name: Merge to HTML report
        run: npx playwright merge-reports --reporter html ./all-blob-reports

      - name: Install lftp
        run: |
          sudo apt-get update
          sudo apt-get install lftp

      - name: Upload merged report to Bunny storage
        run: |
          lftp -u librocco,"${BUNNY_STORAGE_PASSWORD}" storage.bunnycdn.com <<EOF
          set ftp:ssl-allow no
          set mirror:parallel-transfer-count 10
          mirror -R playwright-report/ ${{ github.head_ref || github.ref_name }}/tests
          EOF
        env:
          BUNNY_STORAGE_PASSWORD: ${{ secrets.BUNNY_STORAGE_PASSWORD }}

      - name: Purge Bunny cache
        run: |
          curl --request POST --url https://api.bunny.net/pullzone/1306302/purgeCache \
               --header "content-type: application/json" \
               --header "AccessKey: $BUNNY_API_KEY"
        env:
          BUNNY_API_KEY: ${{ secrets.BUNNY_API_KEY }}

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-merged-html-report
          path: playwright-report
          retention-days: 30

      - name: Output link to report
        run: echo "Merged e2e report https://test.libroc.co/${{ github.head_ref || github.ref_name }}/tests/index.html" | tee -a $GITHUB_STEP_SUMMARY
