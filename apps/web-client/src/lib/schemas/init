/*
	NOTE: We can't specify checked foreign key constraints since cr-sqlite doesn't support it, we'd get an error along these lines:
		Table customer_order_lines has checked foreign key constraints. CRRs may have foreign keys
		but must not have checked foreign key constraints as they can be violated by row level security or replication.
		Using to add the relationships without checking them.
	With that in mind:
		- the would-be foreign keys are specified in the schema, but commented out
		- the indexes (that would be created by foreign key definitions) are created manually and specified below each table definition.

	NOTE: Each table definition is followed by a call to 'crsql_as_crr' for that particular table - this activates the cr-sqlite extension functionality for that table
*/

CREATE TABLE IF NOT EXISTS customer (
	id INTEGER NOT NULL,
	display_id TEXT,
	fullname TEXT,
	email TEXT,
	phone TEXT,
	deposit DECIMAL,
	updated_at INTEGER DEFAULT (strftime('%s', 'now') * 1000),
	PRIMARY KEY (id)
);
SELECT crsql_as_crr('customer');

CREATE TABLE IF NOT EXISTS customer_order_lines (
	id INTEGER NOT NULL,
	customer_id INTEGER,
	isbn TEXT,
	created INTEGER DEFAULT (strftime('%s', 'now') * 1000),
	placed INTEGER,
	received INTEGER,
	collected INTEGER,
	PRIMARY KEY (id)
	-- FOREIGN KEY (customer_id) REFERENCES customer(id) ON UPDATE CASCADE ON DELETE CASCADE,
	-- FOREIGN KEY (isbn) REFERENCES book(isbn) ON UPDATE CASCADE ON DELETE CASCADE
);
CREATE INDEX IF NOT EXISTS idx_customer_order_lines_customer_id ON customer_order_lines(customer_id);
CREATE INDEX IF NOT EXISTS idx_customer_order_lines_isbn ON customer_order_lines(isbn);
SELECT crsql_as_crr('customer_order_lines');

CREATE TABLE IF NOT EXISTS book (
	isbn TEXT NOT NULL,
	title TEXT,
    authors TEXT,
    price DECIMAL,
	year INTEGER,
	publisher TEXT,
	edited_by TEXT,
	out_of_print INTEGER,
	category TEXT,
	updated_at INTEGER,
    PRIMARY KEY (isbn)
);
SELECT crsql_as_crr('book');
CREATE INDEX IF NOT EXISTS idx_book_publisher ON book(publisher);

CREATE TABLE IF NOT EXISTS supplier (
	id INTEGER NOT NULL,
	name TEXT,
	email TEXT,
	address TEXT,
	customerId INTEGER,
	orderFormat TEXT,
	PRIMARY KEY (id)
);
SELECT crsql_as_crr('supplier');

CREATE TABLE IF NOT EXISTS supplier_publisher (
	supplier_id INTEGER,
	publisher TEXT NOT NULL,
	PRIMARY KEY (publisher)
	-- FOREIGN KEY (supplier_id) REFERENCES supplier(id) ON UPDATE CASCADE ON DELETE CASCADE
);
CREATE INDEX IF NOT EXISTS idx_supplier_publisher_supplier_id ON supplier_publisher(supplier_id);
SELECT crsql_as_crr('supplier_publisher');

CREATE TABLE IF NOT EXISTS supplier_order (
	id INTEGER NOT NULL,
	supplier_id INTEGER,
	created INTEGER DEFAULT (strftime('%s', 'now') * 1000),
	PRIMARY KEY (id)
	-- FOREIGN KEY (supplier_id) REFERENCES supplier(id) ON UPDATE CASCADE ON DELETE CASCADE
);
CREATE INDEX IF NOT EXISTS idx_supplier_order_supplier_id ON supplier_order(supplier_id);
SELECT crsql_as_crr('supplier_order');

CREATE TABLE IF NOT EXISTS supplier_order_line (
	supplier_order_id INTEGER NOT NULL,
	isbn TEXT NOT NULL,
	quantity INTEGER NOT NULL DEFAULT 1,
	PRIMARY KEY (supplier_order_id, isbn)
	-- FOREIGN KEY (supplier_order_id) REFERENCES supplier_order(id) ON UPDATE CASCADE ON DELETE CASCADE,
	-- FOREIGN KEY (isbn) REFERENCES book(isbn) ON UPDATE CASCADE ON DELETE CASCADE
);
CREATE INDEX IF NOT EXISTS idx_supplier_order_line_supplier_order_id ON supplier_order_line(supplier_order_id);
CREATE INDEX IF NOT EXISTS idx_supplier_order_line_isbn ON supplier_order_line(isbn);
SELECT crsql_as_crr('supplier_order_line');

CREATE TABLE IF NOT EXISTS reconciliation_order (
	id INTEGER NOT NULL,
	supplier_order_ids TEXT CHECK (json_valid(supplier_order_ids) AND json_array_length(supplier_order_ids) >= 1),
	created INTEGER DEFAULT (strftime('%s', 'now') * 1000),
	updatedAt INTEGER DEFAULT (strftime('%s', 'now') * 1000),
	finalized INTEGER DEFAULT 0,
	PRIMARY KEY (id)
);
SELECT crsql_as_crr('reconciliation_order');

CREATE TABLE IF NOT EXISTS reconciliation_order_lines (
	reconciliation_order_id INTEGER NOT NULL,
	isbn TEXT NOT NULL,
	quantity INTEGER NOT NULL DEFAULT 1,
	PRIMARY KEY (reconciliation_order_id, isbn)
	-- FOREIGN KEY (reconciliation_order_id) REFERENCES reconciliation_order(id) ON UPDATE CASCADE ON DELETE CASCADE,
	-- FOREIGN KEY (isbn) REFERENCES book(isbn) ON UPDATE CASCADE ON DELETE CASCADE
);
CREATE INDEX IF NOT EXISTS idx_reconciliation_order_lines_reconciliation_order_id ON reconciliation_order_lines(reconciliation_order_id);
CREATE INDEX IF NOT EXISTS idx_reconciliation_order_lines_isbn ON reconciliation_order_lines(isbn);
SELECT crsql_as_crr('reconciliation_order_lines');

CREATE TABLE IF NOT EXISTS customer_order_line_supplier_order (
	customer_order_line_id INTEGER NOT NULL,
	supplier_order_id INTEGER NOT NULL,
	placed INTEGER DEFAULT 0,
	PRIMARY KEY (customer_order_line_id, supplier_order_id)
	-- FOREIGN KEY (customer_order_line_id) REFERENCES customer_order_lines(id) ON UPDATE CASCADE ON DELETE CASCADE,
	-- FOREIGN KEY (supplier_order_id) REFERENCES supplier_order(id) ON UPDATE CASCADE ON DELETE CASCADE
);
CREATE INDEX IF NOT EXISTS idx_customer_order_line_supplier_order_customer_order_line_id ON customer_order_line_supplier_order(customer_order_line_id);
CREATE INDEX IF NOT EXISTS idx_customer_order_line_supplier_order_supplier_order_id ON customer_order_line_supplier_order(supplier_order_id);
SELECT crsql_as_crr('customer_order_line_supplier_order');

CREATE TABLE IF NOT EXISTS warehouse (
	-- 0 id is reserved -- when warehouse id is unassigned (in a book txn for ex.) we're defaulting to 0
	-- using 0 instead of NULL as 0 = 0 and NULL != NULL
    id INTEGER NOT NULL CHECK (id <> 0),
    display_name TEXT,
    discount DECIMAL DEFAULT 0,
    PRIMARY KEY (id)
);
SELECT crsql_as_crr('warehouse');

-- if warehouse_id is not null, the note is inbound
-- if is_reconciliation_note is true (1) - it's a reconciliation note (obvious)
-- if the note is not inbound, nor reconciliation, it is outbound
CREATE TABLE IF NOT EXISTS note (
	id INTEGER NOT NULL,
	display_name TEXT,
	warehouse_id INTEGER,
	is_reconciliation_note INTEGER DEFAULT 0,
	default_warehouse INTEGER,
	updated_at INTEGER DEFAULT (strftime('%s', 'now') * 1000),
	committed INTEGER NOT NULL DEFAULT 0,
	committed_at INTEGER,
	PRIMARY KEY (id)
	-- FOREIGN KEY (warehouse_id) REFERENCES warehouse(id) ON UPDATE CASCADE ON DELETE SET NULL,
	-- FOREIGN KEY (default_warehouse) REFERENCES warehouse(id) ON UPDATE CASCADE ON DELETE SET NULL
);
CREATE INDEX IF NOT EXISTS idx_note_warehouse_id ON note(warehouse_id);
CREATE INDEX IF NOT EXISTS idx_note_default_warehouse ON note(default_warehouse);
CREATE INDEX IF NOT EXISTS idx_note_committed_at ON note(committed_at);
SELECT crsql_as_crr('note');

CREATE TABLE IF NOT EXISTS book_transaction (
	isbn TEXT NOT NULL,
	quantity INTEGER NOT NULL DEFAULT 0,
	note_id INTEGER NOT NULL,
	warehouse_id INTEGER NOT NULL DEFAULT 0,
	updated_at INTEGER NOT NULL DEFAULT (strftime('%s', 'now') * 1000),
	committed_at INTEGER,
	PRIMARY KEY (isbn, note_id, warehouse_id)
	-- FOREIGN KEY (isbn) REFERENCES book(isbn) ON UPDATE CASCADE ON DELETE CASCADE,
	-- FOREIGN KEY (note_id) REFERENCES note(id) ON UPDATE CASCADE ON DELETE CASCADE,
	-- FOREIGN KEY (warehouse_id) REFERENCES warehouse(id) ON UPDATE CASCADE ON DELETE CASCADE
);
CREATE INDEX IF NOT EXISTS idx_book_transaction_isbn ON book_transaction(isbn);
CREATE INDEX IF NOT EXISTS idx_book_transaction_note_id ON book_transaction(note_id);
CREATE INDEX IF NOT EXISTS idx_book_transaction_warehouse_id ON book_transaction(warehouse_id);
CREATE INDEX IF NOT EXISTS idx_book_transaction_committed_at ON book_transaction(committed_at);
SELECT crsql_as_crr('book_transaction');


CREATE TABLE IF NOT EXISTS custom_item (
	id INTEGER NOT NULL,
	title TEXT,
	price DECIMAL,
	note_id INTEGER NOT NULL,
	updated_at INTEGER NOT NULL DEFAULT (strftime('%s', 'now') * 1000),
	PRIMARY KEY (id, note_id)
	-- FOREIGN KEY (note_id) REFERENCES note(id) ON UPDATE CASCADE ON DELETE CASCADE
);
CREATE INDEX IF NOT EXISTS idx_custom_item_note_id ON custom_item(note_id);
SELECT crsql_as_crr('custom_item');
